// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MyEngineMessage.proto

#define PROTOBUF_USE_DLLS


#define PROTOBUF_NAMESPACE_OPEN \
  namespace google              \
  {                             \
    namespace protobuf          \
    {
#define PROTOBUF_NAMESPACE_CLOSE \
  }                              \
  }
#define PROTOBUF_CONSTEXPR

#ifndef GOOGLE_PROTOBUF_INCLUDED_MyEngineMessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MyEngineMessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MyEngineMessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MyEngineMessage_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MyEngineMessage_2eproto;
namespace LoginMessage {
class MainMessage;
struct MainMessageDefaultTypeInternal;
extern MainMessageDefaultTypeInternal _MainMessage_default_instance_;
class Name_Repeat_Check;
struct Name_Repeat_CheckDefaultTypeInternal;
extern Name_Repeat_CheckDefaultTypeInternal _Name_Repeat_Check_default_instance_;
class Name_Repeat_Repost;
struct Name_Repeat_RepostDefaultTypeInternal;
extern Name_Repeat_RepostDefaultTypeInternal _Name_Repeat_Repost_default_instance_;
}  // namespace LoginMessage
PROTOBUF_NAMESPACE_OPEN
template<> ::LoginMessage::MainMessage* Arena::CreateMaybeMessage<::LoginMessage::MainMessage>(Arena*);
template<> ::LoginMessage::Name_Repeat_Check* Arena::CreateMaybeMessage<::LoginMessage::Name_Repeat_Check>(Arena*);
template<> ::LoginMessage::Name_Repeat_Repost* Arena::CreateMaybeMessage<::LoginMessage::Name_Repeat_Repost>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace LoginMessage {

enum MessageType : int {
  NAME_REPEAT_CHECK = 0,
  NAME_REPEAT_REPOST = 1,
  MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MessageType_IsValid(int value);
constexpr MessageType MessageType_MIN = NAME_REPEAT_CHECK;
constexpr MessageType MessageType_MAX = NAME_REPEAT_REPOST;
constexpr int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageType_descriptor();
template<typename T>
inline const std::string& MessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MessageType_descriptor(), enum_t_value);
}
inline bool MessageType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
// ===================================================================

class Name_Repeat_Check final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LoginMessage.Name_Repeat_Check) */ {
 public:
  inline Name_Repeat_Check() : Name_Repeat_Check(nullptr) {}
  ~Name_Repeat_Check() override;
  explicit PROTOBUF_CONSTEXPR Name_Repeat_Check(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Name_Repeat_Check(const Name_Repeat_Check& from);
  Name_Repeat_Check(Name_Repeat_Check&& from) noexcept
    : Name_Repeat_Check() {
    *this = ::std::move(from);
  }

  inline Name_Repeat_Check& operator=(const Name_Repeat_Check& from) {
    CopyFrom(from);
    return *this;
  }
  inline Name_Repeat_Check& operator=(Name_Repeat_Check&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Name_Repeat_Check& default_instance() {
    return *internal_default_instance();
  }
  static inline const Name_Repeat_Check* internal_default_instance() {
    return reinterpret_cast<const Name_Repeat_Check*>(
               &_Name_Repeat_Check_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Name_Repeat_Check& a, Name_Repeat_Check& b) {
    a.Swap(&b);
  }
  inline void Swap(Name_Repeat_Check* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Name_Repeat_Check* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Name_Repeat_Check* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Name_Repeat_Check>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Name_Repeat_Check& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Name_Repeat_Check& from) {
    Name_Repeat_Check::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Name_Repeat_Check* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LoginMessage.Name_Repeat_Check";
  }
  protected:
  explicit Name_Repeat_Check(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:LoginMessage.Name_Repeat_Check)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MyEngineMessage_2eproto;
};
// -------------------------------------------------------------------

class Name_Repeat_Repost final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LoginMessage.Name_Repeat_Repost) */ {
 public:
  inline Name_Repeat_Repost() : Name_Repeat_Repost(nullptr) {}
  ~Name_Repeat_Repost() override;
  explicit PROTOBUF_CONSTEXPR Name_Repeat_Repost(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Name_Repeat_Repost(const Name_Repeat_Repost& from);
  Name_Repeat_Repost(Name_Repeat_Repost&& from) noexcept
    : Name_Repeat_Repost() {
    *this = ::std::move(from);
  }

  inline Name_Repeat_Repost& operator=(const Name_Repeat_Repost& from) {
    CopyFrom(from);
    return *this;
  }
  inline Name_Repeat_Repost& operator=(Name_Repeat_Repost&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Name_Repeat_Repost& default_instance() {
    return *internal_default_instance();
  }
  static inline const Name_Repeat_Repost* internal_default_instance() {
    return reinterpret_cast<const Name_Repeat_Repost*>(
               &_Name_Repeat_Repost_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Name_Repeat_Repost& a, Name_Repeat_Repost& b) {
    a.Swap(&b);
  }
  inline void Swap(Name_Repeat_Repost* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Name_Repeat_Repost* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Name_Repeat_Repost* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Name_Repeat_Repost>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Name_Repeat_Repost& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Name_Repeat_Repost& from) {
    Name_Repeat_Repost::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Name_Repeat_Repost* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LoginMessage.Name_Repeat_Repost";
  }
  protected:
  explicit Name_Repeat_Repost(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bool state = 2;
  void clear_state();
  bool state() const;
  void set_state(bool value);
  private:
  bool _internal_state() const;
  void _internal_set_state(bool value);
  public:

  // @@protoc_insertion_point(class_scope:LoginMessage.Name_Repeat_Repost)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    bool state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MyEngineMessage_2eproto;
};
// -------------------------------------------------------------------

class MainMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LoginMessage.MainMessage) */ {
 public:
  inline MainMessage() : MainMessage(nullptr) {}
  ~MainMessage() override;
  explicit PROTOBUF_CONSTEXPR MainMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MainMessage(const MainMessage& from);
  MainMessage(MainMessage&& from) noexcept
    : MainMessage() {
    *this = ::std::move(from);
  }

  inline MainMessage& operator=(const MainMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline MainMessage& operator=(MainMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MainMessage& default_instance() {
    return *internal_default_instance();
  }
  enum ContentCase {
    kContent1 = 2,
    kContent2 = 3,
    CONTENT_NOT_SET = 0,
  };

  static inline const MainMessage* internal_default_instance() {
    return reinterpret_cast<const MainMessage*>(
               &_MainMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MainMessage& a, MainMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(MainMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MainMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MainMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MainMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MainMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MainMessage& from) {
    MainMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MainMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LoginMessage.MainMessage";
  }
  protected:
  explicit MainMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kContent1FieldNumber = 2,
    kContent2FieldNumber = 3,
  };
  // .LoginMessage.MessageType type = 1;
  void clear_type();
  ::LoginMessage::MessageType type() const;
  void set_type(::LoginMessage::MessageType value);
  private:
  ::LoginMessage::MessageType _internal_type() const;
  void _internal_set_type(::LoginMessage::MessageType value);
  public:

  // .LoginMessage.Name_Repeat_Check content1 = 2;
  bool has_content1() const;
  private:
  bool _internal_has_content1() const;
  public:
  void clear_content1();
  const ::LoginMessage::Name_Repeat_Check& content1() const;
  PROTOBUF_NODISCARD ::LoginMessage::Name_Repeat_Check* release_content1();
  ::LoginMessage::Name_Repeat_Check* mutable_content1();
  void set_allocated_content1(::LoginMessage::Name_Repeat_Check* content1);
  private:
  const ::LoginMessage::Name_Repeat_Check& _internal_content1() const;
  ::LoginMessage::Name_Repeat_Check* _internal_mutable_content1();
  public:
  void unsafe_arena_set_allocated_content1(
      ::LoginMessage::Name_Repeat_Check* content1);
  ::LoginMessage::Name_Repeat_Check* unsafe_arena_release_content1();

  // .LoginMessage.Name_Repeat_Repost content2 = 3;
  bool has_content2() const;
  private:
  bool _internal_has_content2() const;
  public:
  void clear_content2();
  const ::LoginMessage::Name_Repeat_Repost& content2() const;
  PROTOBUF_NODISCARD ::LoginMessage::Name_Repeat_Repost* release_content2();
  ::LoginMessage::Name_Repeat_Repost* mutable_content2();
  void set_allocated_content2(::LoginMessage::Name_Repeat_Repost* content2);
  private:
  const ::LoginMessage::Name_Repeat_Repost& _internal_content2() const;
  ::LoginMessage::Name_Repeat_Repost* _internal_mutable_content2();
  public:
  void unsafe_arena_set_allocated_content2(
      ::LoginMessage::Name_Repeat_Repost* content2);
  ::LoginMessage::Name_Repeat_Repost* unsafe_arena_release_content2();

  void clear_content();
  ContentCase content_case() const;
  // @@protoc_insertion_point(class_scope:LoginMessage.MainMessage)
 private:
  class _Internal;
  void set_has_content1();
  void set_has_content2();

  inline bool has_content() const;
  inline void clear_has_content();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int type_;
    union ContentUnion {
      constexpr ContentUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::LoginMessage::Name_Repeat_Check* content1_;
      ::LoginMessage::Name_Repeat_Repost* content2_;
    } content_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MyEngineMessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Name_Repeat_Check

// bytes name = 1;
inline void Name_Repeat_Check::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Name_Repeat_Check::name() const {
  // @@protoc_insertion_point(field_get:LoginMessage.Name_Repeat_Check.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Name_Repeat_Check::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:LoginMessage.Name_Repeat_Check.name)
}
inline std::string* Name_Repeat_Check::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:LoginMessage.Name_Repeat_Check.name)
  return _s;
}
inline const std::string& Name_Repeat_Check::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Name_Repeat_Check::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Name_Repeat_Check::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Name_Repeat_Check::release_name() {
  // @@protoc_insertion_point(field_release:LoginMessage.Name_Repeat_Check.name)
  return _impl_.name_.Release();
}
inline void Name_Repeat_Check::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:LoginMessage.Name_Repeat_Check.name)
}

// -------------------------------------------------------------------

// Name_Repeat_Repost

// bytes name = 1;
inline void Name_Repeat_Repost::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Name_Repeat_Repost::name() const {
  // @@protoc_insertion_point(field_get:LoginMessage.Name_Repeat_Repost.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Name_Repeat_Repost::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:LoginMessage.Name_Repeat_Repost.name)
}
inline std::string* Name_Repeat_Repost::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:LoginMessage.Name_Repeat_Repost.name)
  return _s;
}
inline const std::string& Name_Repeat_Repost::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Name_Repeat_Repost::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Name_Repeat_Repost::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Name_Repeat_Repost::release_name() {
  // @@protoc_insertion_point(field_release:LoginMessage.Name_Repeat_Repost.name)
  return _impl_.name_.Release();
}
inline void Name_Repeat_Repost::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:LoginMessage.Name_Repeat_Repost.name)
}

// bool state = 2;
inline void Name_Repeat_Repost::clear_state() {
  _impl_.state_ = false;
}
inline bool Name_Repeat_Repost::_internal_state() const {
  return _impl_.state_;
}
inline bool Name_Repeat_Repost::state() const {
  // @@protoc_insertion_point(field_get:LoginMessage.Name_Repeat_Repost.state)
  return _internal_state();
}
inline void Name_Repeat_Repost::_internal_set_state(bool value) {
  
  _impl_.state_ = value;
}
inline void Name_Repeat_Repost::set_state(bool value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:LoginMessage.Name_Repeat_Repost.state)
}

// -------------------------------------------------------------------

// MainMessage

// .LoginMessage.MessageType type = 1;
inline void MainMessage::clear_type() {
  _impl_.type_ = 0;
}
inline ::LoginMessage::MessageType MainMessage::_internal_type() const {
  return static_cast< ::LoginMessage::MessageType >(_impl_.type_);
}
inline ::LoginMessage::MessageType MainMessage::type() const {
  // @@protoc_insertion_point(field_get:LoginMessage.MainMessage.type)
  return _internal_type();
}
inline void MainMessage::_internal_set_type(::LoginMessage::MessageType value) {
  
  _impl_.type_ = value;
}
inline void MainMessage::set_type(::LoginMessage::MessageType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:LoginMessage.MainMessage.type)
}

// .LoginMessage.Name_Repeat_Check content1 = 2;
inline bool MainMessage::_internal_has_content1() const {
  return content_case() == kContent1;
}
inline bool MainMessage::has_content1() const {
  return _internal_has_content1();
}
inline void MainMessage::set_has_content1() {
  _impl_._oneof_case_[0] = kContent1;
}
inline void MainMessage::clear_content1() {
  if (_internal_has_content1()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.content_.content1_;
    }
    clear_has_content();
  }
}
inline ::LoginMessage::Name_Repeat_Check* MainMessage::release_content1() {
  // @@protoc_insertion_point(field_release:LoginMessage.MainMessage.content1)
  if (_internal_has_content1()) {
    clear_has_content();
    ::LoginMessage::Name_Repeat_Check* temp = _impl_.content_.content1_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.content_.content1_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::LoginMessage::Name_Repeat_Check& MainMessage::_internal_content1() const {
  return _internal_has_content1()
      ? *_impl_.content_.content1_
      : reinterpret_cast< ::LoginMessage::Name_Repeat_Check&>(::LoginMessage::_Name_Repeat_Check_default_instance_);
}
inline const ::LoginMessage::Name_Repeat_Check& MainMessage::content1() const {
  // @@protoc_insertion_point(field_get:LoginMessage.MainMessage.content1)
  return _internal_content1();
}
inline ::LoginMessage::Name_Repeat_Check* MainMessage::unsafe_arena_release_content1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:LoginMessage.MainMessage.content1)
  if (_internal_has_content1()) {
    clear_has_content();
    ::LoginMessage::Name_Repeat_Check* temp = _impl_.content_.content1_;
    _impl_.content_.content1_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MainMessage::unsafe_arena_set_allocated_content1(::LoginMessage::Name_Repeat_Check* content1) {
  clear_content();
  if (content1) {
    set_has_content1();
    _impl_.content_.content1_ = content1;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LoginMessage.MainMessage.content1)
}
inline ::LoginMessage::Name_Repeat_Check* MainMessage::_internal_mutable_content1() {
  if (!_internal_has_content1()) {
    clear_content();
    set_has_content1();
    _impl_.content_.content1_ = CreateMaybeMessage< ::LoginMessage::Name_Repeat_Check >(GetArenaForAllocation());
  }
  return _impl_.content_.content1_;
}
inline ::LoginMessage::Name_Repeat_Check* MainMessage::mutable_content1() {
  ::LoginMessage::Name_Repeat_Check* _msg = _internal_mutable_content1();
  // @@protoc_insertion_point(field_mutable:LoginMessage.MainMessage.content1)
  return _msg;
}

// .LoginMessage.Name_Repeat_Repost content2 = 3;
inline bool MainMessage::_internal_has_content2() const {
  return content_case() == kContent2;
}
inline bool MainMessage::has_content2() const {
  return _internal_has_content2();
}
inline void MainMessage::set_has_content2() {
  _impl_._oneof_case_[0] = kContent2;
}
inline void MainMessage::clear_content2() {
  if (_internal_has_content2()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.content_.content2_;
    }
    clear_has_content();
  }
}
inline ::LoginMessage::Name_Repeat_Repost* MainMessage::release_content2() {
  // @@protoc_insertion_point(field_release:LoginMessage.MainMessage.content2)
  if (_internal_has_content2()) {
    clear_has_content();
    ::LoginMessage::Name_Repeat_Repost* temp = _impl_.content_.content2_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.content_.content2_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::LoginMessage::Name_Repeat_Repost& MainMessage::_internal_content2() const {
  return _internal_has_content2()
      ? *_impl_.content_.content2_
      : reinterpret_cast< ::LoginMessage::Name_Repeat_Repost&>(::LoginMessage::_Name_Repeat_Repost_default_instance_);
}
inline const ::LoginMessage::Name_Repeat_Repost& MainMessage::content2() const {
  // @@protoc_insertion_point(field_get:LoginMessage.MainMessage.content2)
  return _internal_content2();
}
inline ::LoginMessage::Name_Repeat_Repost* MainMessage::unsafe_arena_release_content2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:LoginMessage.MainMessage.content2)
  if (_internal_has_content2()) {
    clear_has_content();
    ::LoginMessage::Name_Repeat_Repost* temp = _impl_.content_.content2_;
    _impl_.content_.content2_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MainMessage::unsafe_arena_set_allocated_content2(::LoginMessage::Name_Repeat_Repost* content2) {
  clear_content();
  if (content2) {
    set_has_content2();
    _impl_.content_.content2_ = content2;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LoginMessage.MainMessage.content2)
}
inline ::LoginMessage::Name_Repeat_Repost* MainMessage::_internal_mutable_content2() {
  if (!_internal_has_content2()) {
    clear_content();
    set_has_content2();
    _impl_.content_.content2_ = CreateMaybeMessage< ::LoginMessage::Name_Repeat_Repost >(GetArenaForAllocation());
  }
  return _impl_.content_.content2_;
}
inline ::LoginMessage::Name_Repeat_Repost* MainMessage::mutable_content2() {
  ::LoginMessage::Name_Repeat_Repost* _msg = _internal_mutable_content2();
  // @@protoc_insertion_point(field_mutable:LoginMessage.MainMessage.content2)
  return _msg;
}

inline bool MainMessage::has_content() const {
  return content_case() != CONTENT_NOT_SET;
}
inline void MainMessage::clear_has_content() {
  _impl_._oneof_case_[0] = CONTENT_NOT_SET;
}
inline MainMessage::ContentCase MainMessage::content_case() const {
  return MainMessage::ContentCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace LoginMessage

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::LoginMessage::MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LoginMessage::MessageType>() {
  return ::LoginMessage::MessageType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MyEngineMessage_2eproto
